datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  initiated
  pending
  processed
  shipped
  outForDelivery
  delivered
  returned
  canceled
}

enum PaymentStatus {
  pending
  failed
  received
}

enum ReturnStatus {
  none
  requested
  rejected
  returned
}

enum UserRole {
  SELLER
  USER
}

model User {
  id                 String            @id @default(cuid()) @map("_id")
  name               String
  email              String            @unique
  emailVerified      DateTime?
  password           String
  phoneNumber        String?
  isActive           Boolean?
  premiumMember      Boolean?
  registrationDate   DateTime?
  passwordResetToken String?
  verificationToken  String?
  address            Address[]
  profilePicture     String?
  isBlocked          Boolean?
  role               UserRole          @default(USER)
  orders             Order[]
  favourite          Favourite[]
  cart               Cart[]
  productResponse    ProductFeedback[]
}

model Address {
  id             String  @id @default(cuid()) @map("_id")
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  address        String
  defaultAddress Boolean
}

model Product {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  image                  String
  productName            String
  price                  Float
  category               String
  description            String
  stocks                 Int
  sellerId               String?
  offer                  Float
  isAssured              Boolean
  isActive               Boolean
  otherSpecifications    Json
  orders                 Order[]
  cart                   Cart[]
  Favourite              Favourite[]
  RatingsReviewsComments ProductFeedback[]
}

model ProductFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int
  text      String
  isValid   Boolean
  date      DateTime
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
}

model Order {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentId          String
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  address            String
  product            Product       @relation(fields: [productId], references: [id])
  productId          String        @db.ObjectId
  quantity           Int
  amount             Float
  status             Status
  paymentStatus      PaymentStatus
  shipmentTrackingId String
  orderDate          DateTime
  cancelationRequest Boolean
  returnStatus       ReturnStatus
}
